from itertools import permutations

def solve_cryptarithmetic():
    # Letters involved in the puzzle
    letters = ('S', 'E', 'N', 'D', 'M', 'O', 'R', 'Y')
    
    # All permutations of digits 0-9 for the 8 letters
    for perm in permutations(range(10), len(letters)):
        mapping = dict(zip(letters, perm))
        
        # The leading letters S and M cannot be zero
        if mapping['S'] == 0 or mapping['M'] == 0:
            continue
        
        # Compute SEND + MORE = MONEY
        send = (mapping['S'] * 1000 +
                mapping['E'] * 100 +
                mapping['N'] * 10 +
                mapping['D'])
        
        more = (mapping['M'] * 1000 +
                mapping['O'] * 100 +
                mapping['R'] * 10 +
                mapping['E'])
        
        money = (mapping['M'] * 10000 +
                 mapping['O'] * 1000 +
                 mapping['N'] * 100 +
                 mapping['E'] * 10 +
                 mapping['Y'])
        
        if send + more == money:
            print("Solution found:")
            for letter in letters:
                print(f"{letter} = {mapping[letter]}")
            print(f"\n{send} + {more} = {money}")
            return
    
    print("No solution found.")

if __name__ == "__main__":
    solve_cryptarithmetic()
