import itertools

def tsp_brute_force(distance_matrix):
    n = len(distance_matrix)
    cities = range(n)
    min_cost = float('inf')
    best_path = []

    for perm in itertools.permutations(cities):
        if perm[0] != 0:
            continue  # Start from city 0 to avoid duplicate routes

        cost = 0
        for i in range(n - 1):
            cost += distance_matrix[perm[i]][perm[i+1]]
        cost += distance_matrix[perm[-1]][perm[0]]  # Return to start

        if cost < min_cost:
            min_cost = cost
            best_path = perm

    return best_path + (best_path[0],), min_cost


# Example usage
if __name__ == "__main__":
    # Example distance matrix (symmetric)
    distance_matrix = [
        [0, 10, 15, 20],
        [10, 0, 35, 25],
        [15, 35, 0, 30],
        [20, 25, 30, 0]
    ]

    path, cost = tsp_brute_force(distance_matrix)
    print("Shortest Path:", path)
    print("Minimum Cost:", cost)
